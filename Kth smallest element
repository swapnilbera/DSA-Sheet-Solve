//{ Driver Code Starts
//Initial Template for Java

/*package whatever //do not write package name here */

import java.io.*;
import java.util.*;
class GFG {
	public static void main (String[] args) {
		Scanner sc=new Scanner(System.in);
		PrintWriter out = new PrintWriter(System.out);
		int t=sc.nextInt();
		
		while(t-->0)
		{
		    int n=sc.nextInt();
		    
		    int arr[]=new int[n];
		    
		    for(int i=0;i<n;i++)
		    arr[i]=sc.nextInt();
		    
		    int k=sc.nextInt();
		    Solution ob = new Solution();
		    out.println(ob.kthSmallest(arr, 0, n-1, k));
		}
		out.flush();
	}
}

// } Driver Code Ends


//User function Template for Java

class Solution{
      static int partition(int arr[],
                         int low, int high)
    {
        int temp;
        int pivot = arr[high];
        int i = (low - 1);
        for (int j = low; j <= high - 1; j++)
        {
            if (arr[j] <= pivot)
            {
                i++;
                temp = arr[i];
                arr[i] = arr[j];
                arr[j] = temp;
            }
        }
         
            temp = arr[i + 1];
            arr[i + 1] = arr[high];
            arr[high] = temp;
             
        return (i + 1);
    }
     
    public static int kthSmallest(int a[], int left,
                           int right, int k) 
    { 
         while (left <= right)
        {
     
            // Partition a[left..right] around a pivot
            // and find the position of the pivot
            int pivotIndex = partition(a, left, right);
     
            // If pivot itself is the k-th smallest element
            if (pivotIndex == k - 1)
                return a[pivotIndex];
     
            // If there are more than k-1 elements on
            // left of pivot, then k-th smallest must be
            // on left side.
            else if (pivotIndex > k - 1)
                right = pivotIndex - 1;
     
            // Else k-th smallest is on right side.
            else
                left = pivotIndex + 1;
        }
        return -1;
    } 
}
